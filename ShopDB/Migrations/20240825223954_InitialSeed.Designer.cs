// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShopDB;

#nullable disable

namespace ShopDB.Migrations
{
    [DbContext(typeof(ShopDbContext))]
    [Migration("20240825223954_InitialSeed")]
    partial class InitialSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProductsShops", b =>
                {
                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.Property<int>("ShopsId")
                        .HasColumnType("int");

                    b.HasKey("ProductsId", "ShopsId");

                    b.HasIndex("ShopsId");

                    b.ToTable("ProductsShops");
                });

            modelBuilder.Entity("ShopDB.Entities.Categories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Bakery"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Diary"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Fish"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Sweet"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Meat"
                        });
                });

            modelBuilder.Entity("ShopDB.Entities.Cities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            Name = "Rivne"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 1,
                            Name = "Lviv"
                        });
                });

            modelBuilder.Entity("ShopDB.Entities.Countries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Spain"
                        });
                });

            modelBuilder.Entity("ShopDB.Entities.Positions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Positions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Manager"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Seller"
                        });
                });

            modelBuilder.Entity("ShopDB.Entities.Products", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<float>("Discount")
                        .HasColumnType("real");

                    b.Property<bool>("IsInStock")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Discount = 0f,
                            IsInStock = true,
                            Name = "Bread",
                            Price = 35m,
                            Quantity = 30
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Discount = 0f,
                            IsInStock = true,
                            Name = "Baguette",
                            Price = 50m,
                            Quantity = 20
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            Discount = 0f,
                            IsInStock = true,
                            Name = "Milk",
                            Price = 50m,
                            Quantity = 20
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            Discount = 0f,
                            IsInStock = true,
                            Name = "Yogurt",
                            Price = 60m,
                            Quantity = 40
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            Discount = 0f,
                            IsInStock = true,
                            Name = "Perch",
                            Price = 60m,
                            Quantity = 10
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 5,
                            Discount = 0f,
                            IsInStock = false,
                            Name = "Mutton",
                            Price = 80m,
                            Quantity = 0
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 5,
                            Discount = 0f,
                            IsInStock = true,
                            Name = "Beef",
                            Price = 60m,
                            Quantity = 10
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 4,
                            Discount = 0f,
                            IsInStock = true,
                            Name = "Cake",
                            Price = 300m,
                            Quantity = 10
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 4,
                            Discount = 0f,
                            IsInStock = true,
                            Name = "Pancakes",
                            Price = 120m,
                            Quantity = 15
                        });
                });

            modelBuilder.Entity("ShopDB.Entities.Shops", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ParkingArea")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Shops");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Soborna 414",
                            CityId = 1,
                            Name = "ATB",
                            ParkingArea = 45
                        },
                        new
                        {
                            Id = 2,
                            Address = "Soborna 12",
                            CityId = 1,
                            Name = "Producty",
                            ParkingArea = 90
                        },
                        new
                        {
                            Id = 3,
                            Address = "Soborna",
                            CityId = 2,
                            Name = "Welmart"
                        });
                });

            modelBuilder.Entity("ShopDB.Entities.Workers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.HasIndex("ShopId");

                    b.ToTable("Workers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "Olesya1987@gmail.com",
                            Name = "Olesya",
                            PhoneNumber = "1234567890",
                            PositionId = 1,
                            Salary = 22000m,
                            ShopId = 1,
                            Surname = "Kovalenco"
                        },
                        new
                        {
                            Id = 2,
                            Email = "MarisBest@gmail.com",
                            Name = "Maria",
                            PhoneNumber = "1234567890",
                            PositionId = 2,
                            Salary = 12000m,
                            ShopId = 1,
                            Surname = "Lyashcyk"
                        },
                        new
                        {
                            Id = 3,
                            Email = "OlegWowk@gmail.com",
                            Name = "Oleg",
                            PhoneNumber = "1234567890",
                            PositionId = 2,
                            Salary = 15000m,
                            ShopId = 2,
                            Surname = "Kovalenco"
                        });
                });

            modelBuilder.Entity("ProductsShops", b =>
                {
                    b.HasOne("ShopDB.Entities.Products", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopDB.Entities.Shops", null)
                        .WithMany()
                        .HasForeignKey("ShopsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShopDB.Entities.Cities", b =>
                {
                    b.HasOne("ShopDB.Entities.Countries", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ShopDB.Entities.Products", b =>
                {
                    b.HasOne("ShopDB.Entities.Categories", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ShopDB.Entities.Shops", b =>
                {
                    b.HasOne("ShopDB.Entities.Cities", "City")
                        .WithMany("Shops")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("ShopDB.Entities.Workers", b =>
                {
                    b.HasOne("ShopDB.Entities.Positions", "Position")
                        .WithMany("Workers")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopDB.Entities.Shops", "Shop")
                        .WithMany("Workers")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("ShopDB.Entities.Categories", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ShopDB.Entities.Cities", b =>
                {
                    b.Navigation("Shops");
                });

            modelBuilder.Entity("ShopDB.Entities.Countries", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("ShopDB.Entities.Positions", b =>
                {
                    b.Navigation("Workers");
                });

            modelBuilder.Entity("ShopDB.Entities.Shops", b =>
                {
                    b.Navigation("Workers");
                });
#pragma warning restore 612, 618
        }
    }
}
